<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/09/20/hello-world/"/>
    <url>/2025/09/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>两数之和 - 从双重循环到哈希字典的优化</title>
    <link href="/2023/11/07/2025.9.21.1/"/>
    <url>/2023/11/07/2025.9.21.1/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 <code>target</code> 的那两个整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：双重循环（暴力枚举）"><a href="#方法一：双重循环（暴力枚举）" class="headerlink" title="方法一：双重循环（暴力枚举）"></a>方法一：双重循环（暴力枚举）</h3><p><strong>思路</strong>：遍历每个元素 <code>x</code>，并查找是否存在一个值与 <code>target - x</code> 相等的目标元素。</p><p><strong>时间复杂度</strong>：O(n²) - 对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素。<br><strong>空间复杂度</strong>：O(1) - 只使用了常数级别的额外空间。</p><pre><code class="language-python">class Solution(object):    def twoSum(self, nums, target):        &quot;&quot;&quot;        :type nums: List[int]        :type target: int        :rtype: List[int]        &quot;&quot;&quot;        n = len(nums)        for i in range(n):            for j in range(i + 1, n):                if nums[i] + nums[j] == target:                    return [i, j]方法二：哈希表/字典（优化解法）思路：使用字典（哈希表）来存储每个元素的值及其索引。在遍历数组时，我们检查当前元素所需的补数（target - num）是否已经存在于字典中。如果存在，立即返回结果；如果不存在，则将当前元素的值和索引存入字典，继续遍历。时间复杂度：O(n) - 我们只遍历了包含有 n 个元素的列表一次。在字典中查找补数的时间复杂度为 O(1)。空间复杂度：O(n) - 所需的额外空间取决于字典中存储的元素数量，最多需要存储 n 个元素。pythonclass Solution(object):    def twoSum(self, nums, target):        &quot;&quot;&quot;        :type nums: List[int]        :type target: int        :rtype: List[int]        &quot;&quot;&quot;        hashmap = &#123;&#125;        for i, num in enumerate(nums):            complement = target - num            # 检查补数是否已在哈希表中            if complement in hashmap:                return [i, hashmap[complement]]            # 将当前数字存入哈希表（注意：必须在检查之后存入！）            hashmap[num] = i关键点说明</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
